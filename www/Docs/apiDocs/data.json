{
    "project": {
        "name": "The jsaSound API",
        "description": "The jsaSound API for building sound models with Web Audio",
        "version": "0.0.1",
        "url": "https://animatedsoundworks.com/",
        "logo": "http://anclab.org/wp-content/themes/atahualpa/images/header/anclab_header.jpg"
    },
    "files": {
        "jsaSndLib\\jsaOpCodes\\jsaConvolveNode.js": {
            "name": "jsaSndLib\\jsaOpCodes\\jsaConvolveNode.js",
            "modules": {
                "jsaConvolverNode.js": 1
            },
            "classes": {
                "jsaConvolverNode (Function)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js": {
            "name": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "modules": {
                "jsaEvenPhasor.js": 1
            },
            "classes": {
                "jsaEvenPhasor (Function)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\audioResourceManager.js": {
            "name": "jsaSndLib\\audioResourceManager.js",
            "modules": {
                "AudioResourceManager.js": 1
            },
            "classes": {
                "AudioResourceManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\audioUtils.js": {
            "name": "jsaSndLib\\audioUtils.js",
            "modules": {
                "audioUtils.js": 1
            },
            "classes": {
                "audioUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\baseSM.js": {
            "name": "jsaSndLib\\baseSM.js",
            "modules": {
                "baseSM.js": 1
            },
            "classes": {
                "baseSM (Function)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\poly.js": {
            "name": "jsaSndLib\\poly.js",
            "modules": {
                "poly.js": 1
            },
            "classes": {
                "poly (Function)": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "jsaSndLib\\utils.js": {
            "name": "jsaSndLib\\utils.js",
            "modules": {
                "utils.js": 1
            },
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "jsaConvolverNode.js": {
            "name": "jsaConvolverNode.js",
            "submodules": {},
            "classes": {
                "jsaConvolverNode (Function)": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\jsaOpCodes\\jsaConvolveNode.js",
            "line": 6,
            "description": "Creates a convolver node",
            "itemtype": "main"
        },
        "jsaEvenPhasor.js": {
            "name": "jsaEvenPhasor.js",
            "submodules": {},
            "classes": {
                "jsaEvenPhasor (Function)": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 19,
            "description": "Creates a phasor that can be used to time period events even period is changing",
            "itemtype": "main"
        },
        "AudioResourceManager.js": {
            "name": "AudioResourceManager.js",
            "submodules": {},
            "classes": {
                "AudioResourceManager": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\audioResourceManager.js",
            "line": 8,
            "description": "Provides the base class for all sound models",
            "itemtype": "main"
        },
        "audioUtils.js": {
            "name": "audioUtils.js",
            "submodules": {},
            "classes": {
                "audioUtils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\audioUtils.js",
            "line": 15,
            "description": "Provides some basic utilities",
            "itemtype": "main"
        },
        "baseSM.js": {
            "name": "baseSM.js",
            "submodules": {},
            "classes": {
                "baseSM (Function)": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\baseSM.js",
            "line": 7,
            "description": "Provides the base class for all sound models",
            "itemtype": "main"
        },
        "poly.js": {
            "name": "poly.js",
            "submodules": {},
            "classes": {
                "poly (Function)": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\poly.js",
            "line": 12,
            "description": "Provides polyphonic support",
            "itemtype": "main"
        },
        "utils.js": {
            "name": "utils.js",
            "submodules": {},
            "classes": {
                "utils": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "jsaSndLib\\utils.js",
            "line": 15,
            "description": "Provides some basic utilities",
            "itemtype": "main"
        }
    },
    "classes": {
        "jsaConvolverNode (Function)": {
            "name": "jsaConvolverNode (Function)",
            "shortname": "jsaConvolverNode (Function)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jsaConvolverNode.js",
            "namespace": "",
            "file": "jsaSndLib\\jsaOpCodes\\jsaConvolveNode.js",
            "line": 6
        },
        "jsaEvenPhasor (Function)": {
            "name": "jsaEvenPhasor (Function)",
            "shortname": "jsaEvenPhasor (Function)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "jsaEvenPhasor.js",
            "namespace": "",
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 19
        },
        "AudioResourceManager": {
            "name": "AudioResourceManager",
            "shortname": "AudioResourceManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "AudioResourceManager.js",
            "namespace": "",
            "file": "jsaSndLib\\audioResourceManager.js",
            "line": 8
        },
        "audioUtils": {
            "name": "audioUtils",
            "shortname": "audioUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "audioUtils.js",
            "namespace": "",
            "file": "jsaSndLib\\audioUtils.js",
            "line": 15
        },
        "baseSM (Function)": {
            "name": "baseSM (Function)",
            "shortname": "baseSM (Function)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "baseSM.js",
            "namespace": "",
            "file": "jsaSndLib\\baseSM.js",
            "line": 7,
            "description": "Base factory for sound models"
        },
        "poly (Function)": {
            "name": "poly (Function)",
            "shortname": "poly (Function)",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "poly.js",
            "namespace": "",
            "file": "jsaSndLib\\poly.js",
            "line": 12
        },
        "utils": {
            "name": "utils",
            "shortname": "utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "utils.js",
            "namespace": "",
            "file": "jsaSndLib\\utils.js",
            "line": 15
        }
    },
    "classitems": [
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaConvolveNode.js",
            "line": 15,
            "description": "Creates convolver node based on the audio resource from a URL",
            "itemtype": "method",
            "name": "(jsaConvolverNode)",
            "params": [
                {
                    "name": "soundUrl",
                    "description": "name of audio resource to use as convolution kernel",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Web Audio API convolver node"
            },
            "class": "jsaConvolverNode (Function)",
            "module": "jsaConvolverNode.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 27,
            "description": "Creates a phasor used to periodically trigger events",
            "itemtype": "method",
            "name": "(jsaEvenPhasor)",
            "return": {
                "description": "Interface object for controlling the eventPhasor containing all the other methods in this module."
            },
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 44,
            "description": "Sets the time",
            "itemtype": "method",
            "name": "setCurrentTime",
            "params": [
                {
                    "name": "time",
                    "description": "(in secs)",
                    "type": "Number"
                }
            ],
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 53,
            "description": "Sets the phaser to a specific phase",
            "itemtype": "method",
            "name": "setPhase",
            "params": [
                {
                    "name": "phase",
                    "description": "in [0,1]",
                    "type": "Number"
                }
            ],
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 62,
            "description": "Get the current phse",
            "itemtype": "method",
            "name": "getPhase",
            "params": [
                {
                    "name": "phase",
                    "description": "in [0,1]",
                    "type": "Number"
                }
            ],
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 71,
            "description": "Sets the frequency that the phase will move (revolutions per second)",
            "itemtype": "method",
            "name": "setFreq",
            "type": "Number",
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 79,
            "description": "Advance the time rotating the phasor accorording to its frequency.",
            "itemtype": "method",
            "name": "advance",
            "params": [
                {
                    "name": "interval",
                    "description": "of time to advance",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current phase",
                "type": "Number"
            },
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 90,
            "description": "Set the time of the phasor rotating if from its current position as necessary",
            "itemtype": "method",
            "name": "advanceToTime",
            "params": [
                {
                    "name": "The",
                    "description": "time to advance the phasor to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "current phase",
                "type": "Number"
            },
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 103,
            "description": "Advances the time to that of next zero phase (which is when it \"ticks\")",
            "itemtype": "method",
            "name": "advanceToTick",
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 112,
            "description": "Advances the time to that of next zero phase (which is when it \"ticks\")",
            "itemtype": "method",
            "name": "nextTickTime",
            "return": {
                "description": "time in sseconds",
                "type": "Number"
            },
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\jsaOpCodes\\jsaEventPhasor.js",
            "line": 124,
            "description": "Get the time between now and the next tick",
            "itemtype": "method",
            "name": "timeToTick",
            "return": {
                "description": "the amount of time until next tick",
                "type": "Number"
            },
            "class": "jsaEvenPhasor (Function)",
            "module": "jsaEvenPhasor.js"
        },
        {
            "file": "jsaSndLib\\audioResourceManager.js",
            "line": 20,
            "description": "Manages audio resource loading so that only resources are only loaded once, and are stored in buffers that multiple sounds (or polyphonic sounds) can then reference.",
            "itemtype": "method",
            "name": "loadAudioResource",
            "params": [
                {
                    "name": "i_url",
                    "description": "The url of the audio resource to be loaded",
                    "type": "String"
                },
                {
                    "name": "i_onload",
                    "description": "function to be called when loaded. Will be passed the buffer that the audio resource has been loaded in to.",
                    "type": "Function"
                }
            ],
            "class": "AudioResourceManager",
            "module": "AudioResourceManager.js"
        },
        {
            "file": "jsaSndLib\\audioUtils.js",
            "line": 50,
            "description": "Converts note names (eg. Eb2, F#, A4) into frequency values",
            "itemtype": "method",
            "name": "note2Freq",
            "params": [
                {
                    "name": "noteName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "frequency value",
                "type": "Number"
            },
            "class": "audioUtils",
            "module": "audioUtils.js"
        },
        {
            "file": "jsaSndLib\\audioUtils.js",
            "line": 64,
            "description": "Converts db values in [-inf, 0] into \"gain\" values in [0,1]\nfor example, 0 dB yields 1, -6 dB yields .5",
            "itemtype": "method",
            "name": "dB2Ratio",
            "params": [
                {
                    "name": "i_dB",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "gain  value 10^(dB/20)",
                "type": "Number"
            },
            "class": "audioUtils",
            "module": "audioUtils.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 31,
            "description": "Creates a new \"GraphNode\" that can be connected in an audio graph just like a Web Audio API audioNode ().\nThe GraphNode returned also provides the generic interface (play, stop, setParam) for control.\nAlso provides methods the sound modeler uses to, for example, register parameters to expose to users.",
            "itemtype": "method",
            "name": "(baseSM)",
            "params": [
                {
                    "name": "i_node",
                    "description": "should be empty literal object {}",
                    "type": "Object"
                },
                {
                    "name": "i_inputs",
                    "description": "an array of audio nodes that can be use to connect to this GraphNode",
                    "type": "AudioNode Array"
                },
                {
                    "name": "i_outputs",
                    "description": "an array of audio nodes that will be used to connect this GraphNode  to other audio nodes or the audio destinations",
                    "type": "AudioNode Array"
                }
            ],
            "return": {
                "description": "The object used as \"the model\" providing the  interface for configuring and controling. All other methods in this module belong to this object.",
                "type": "Interface Object"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 65,
            "itemtype": "method",
            "name": "setAboutText",
            "params": [
                {
                    "name": "i_text",
                    "description": "text descritption of model, hints, etc",
                    "type": "String"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 73,
            "itemtype": "method",
            "name": "getAboutText",
            "return": {
                "description": "text descritption of model, hints, created with setAboutText",
                "type": "String"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 80,
            "description": "Creates a parameter that will be used to control the model and provide information",
            "itemtype": "method",
            "name": "registerParam",
            "params": [
                {
                    "name": "i_name",
                    "description": "name to expose to the world for this param",
                    "type": "String"
                },
                {
                    "name": "i_type",
                    "description": "type [\"range\", \"URL\"]",
                    "type": "String"
                },
                {
                    "name": "i_val",
                    "description": "initial value",
                    "type": "String"
                },
                {
                    "name": "i_f",
                    "description": "function to execute when setParam(name, val) is called.",
                    "type": "String"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 103,
            "description": "Grabs a parameter from a child model, registers it on this model, and just reflects all calls to the child",
            "itemtype": "method",
            "name": "registerChildParam",
            "params": [
                {
                    "name": "childModel",
                    "description": "",
                    "type": "SoundModel"
                },
                {
                    "name": "childPname",
                    "description": "name of the child parameter to expose",
                    "type": "String"
                },
                {
                    "name": "parentPname",
                    "description": "name to use for the parameter",
                    "type": "String",
                    "optional": true,
                    "optdefault": "childPname"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 116,
            "itemtype": "method",
            "name": "getNumParams",
            "return": {
                "description": "the number of paramters the model exposes",
                "type": "Number"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 124,
            "itemtype": "method",
            "name": "getParamNames",
            "return": {
                "description": "array of model parameter names",
                "type": "Array of Strings"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 132,
            "itemtype": "method",
            "name": "getParamNames",
            "params": [
                {
                    "name": "index",
                    "description": "index of the parameter whose name you want"
                }
            ],
            "return": {
                "description": "the name of the parameter with the secified index",
                "type": "String"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 146,
            "description": "Get specified information about a parameter",
            "itemtype": "method",
            "name": "getParam",
            "params": [
                {
                    "name": "i_name",
                    "description": "the name of the param you want info about",
                    "type": "String"
                },
                {
                    "name": "i_prop",
                    "description": "on of [\"name\", \"type\", \"val\", \"normval\", \"min\" or \"max\"]",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the value of the property you requested"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 177,
            "description": "Set the parameter using values in [0,1]",
            "itemtype": "method",
            "name": "setParamNorm",
            "params": [
                {
                    "name": "i_name",
                    "description": "the name of the param you want to set",
                    "type": "String"
                },
                {
                    "name": "i_val",
                    "description": "the value to set the parameter",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 196,
            "description": "set the parameter using values using its own units in [min,max]",
            "itemtype": "method",
            "name": "setParam",
            "params": [
                {
                    "name": "i_name",
                    "description": "the name of the param you want to set",
                    "type": "String"
                },
                {
                    "name": "i_val",
                    "description": "the value to set the parameter",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 220,
            "itemtype": "method",
            "name": "play",
            "params": [
                {
                    "name": "i_time",
                    "description": "what time to play (recommended use: 0 or no argument; use schedule(t,func) to scheudle play in the future)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 240,
            "description": "Override this in your sound model",
            "itemtype": "method",
            "name": "onPlay",
            "params": [
                {
                    "name": "i_time",
                    "description": "time to play (can be fed to Web Audio API nodes in your override)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 249,
            "itemtype": "method",
            "name": "release",
            "params": [
                {
                    "name": "i_time",
                    "description": "time to release  (recommended use: 0 or no argument; use schedule(t,func) to scheudle releases in the future)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 262,
            "description": "Override this in your sound model  to send the model in to its release phase",
            "itemtype": "method",
            "name": "onRelease",
            "params": [
                {
                    "name": "i_time",
                    "description": "time to release (can be fed to Web Audio API nodes in your override)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 272,
            "description": "Stop the model from playing, disconnects it from output so it won't waste system resources anymore. Your onRelease() method should schedule or call stop when it is done",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "i_time",
                    "description": "time to stop  (recommended use: 0 or no argument; use schedule(t,func) to scheudle stops in the future)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 287,
            "description": "override this in your sound model  (optional)",
            "itemtype": "method",
            "name": "onStop",
            "params": [
                {
                    "name": "i_time",
                    "description": "time to stop (can be fed to Web Audio API nodes)",
                    "type": "Number"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 310,
            "description": "test a parameter number for existence",
            "itemtype": "method",
            "name": "testPName",
            "params": [
                {
                    "name": "i_ind",
                    "description": "index of parameter",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "either the parmaeter name (if it exists) or undefined"
            },
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 344,
            "description": "schedule a function to run in the future (uses a queue and a single timer)",
            "itemtype": "method",
            "name": "schedule",
            "params": [
                {
                    "name": "t",
                    "description": "time to execute",
                    "type": "Number"
                },
                {
                    "name": "{Function",
                    "description": "function to execute at time t"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 352,
            "description": "Clear the queue of all future events for this model.",
            "itemtype": "method",
            "name": "qClear",
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 364,
            "description": "Register a param which will then be accessible through the interface functions: setParam, getParam, etc.",
            "itemtype": "method",
            "name": "registerParam",
            "params": [
                {
                    "name": "name",
                    "description": "the String value used to refer to this parameters",
                    "type": "Number"
                },
                {
                    "name": "the",
                    "description": "jsaSound type of the parameter (either \"range\" or \"URL\"), the latter of which would better be called a string parameter.",
                    "type": "String"
                },
                {
                    "name": "with",
                    "description": "three numberical properties: (\"min\", \"max\", and \"val\"), the minimumum, maximum, and default values of the parameter.",
                    "type": "Object"
                },
                {
                    "name": "function",
                    "description": "to execute when the parameter is set with setParam()",
                    "type": "Function"
                }
            ],
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 399,
            "description": "Start recording audio output from the model",
            "itemtype": "method",
            "name": "startRecording",
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\baseSM.js",
            "line": 414,
            "description": "Stop recording audio output from the model",
            "itemtype": "method",
            "name": "stopRecording",
            "class": "baseSM (Function)",
            "module": "baseSM.js"
        },
        {
            "file": "jsaSndLib\\poly.js",
            "line": 21,
            "description": "Creates a pool of instances of a sound model so that they can be played polyphonically",
            "itemtype": "method",
            "name": "(poly)",
            "params": [
                {
                    "name": "funciton",
                    "description": "to be used for creating instances of a sound model",
                    "type": "Sound Model Factory Function"
                },
                {
                    "name": "poly",
                    "description": "How large the pool (maximum polyphony) should be",
                    "type": "Number"
                },
                {
                    "name": "node",
                    "description": "that the polyphonic model(s) should connect to  (managed dynamically as nodes are called into and put out of action)",
                    "type": "AudioNode"
                }
            ],
            "return": {
                "description": "the \"soundbank\" Interface object that exposes all the other methods in this module.",
                "type": "Interface Object"
            },
            "class": "poly (Function)",
            "module": "poly.js"
        },
        {
            "file": "jsaSndLib\\poly.js",
            "line": 39,
            "description": "Sets a parameter value (on all polyphonic instances in the pool)",
            "itemtype": "method",
            "name": "setParam",
            "params": [
                {
                    "name": "parameter",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "parameter",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "class": "poly (Function)",
            "module": "poly.js"
        },
        {
            "file": "jsaSndLib\\poly.js",
            "line": 52,
            "description": "Sets a normalized parameter value (in [0,1] (on all polyphonic instances in the pool)",
            "itemtype": "method",
            "name": "setParamNorm",
            "params": [
                {
                    "name": "parameter",
                    "description": "name",
                    "type": "String"
                },
                {
                    "name": "parameter",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "class": "poly (Function)",
            "module": "poly.js"
        },
        {
            "file": "jsaSndLib\\poly.js",
            "line": 65,
            "description": "gets an available sound from the polyphony pool",
            "itemtype": "method",
            "name": "getSnd",
            "class": "poly (Function)",
            "module": "poly.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 24,
            "description": "Converts db values in [-inf, 0] into \"gain\" values in [0,1]\nfor example, 0 dB yields 1, -6 dB yields .5",
            "itemtype": "method",
            "name": "dB2Ratio",
            "params": [
                {
                    "name": "i_dB",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "gain  value 10^(dB/20)",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 35,
            "description": "Get the requestAnimationFunction",
            "itemtype": "method",
            "name": "getRequestAnimationFrameFunc",
            "return": {
                "description": "the correct version of the requestAnimationFrame funciton for the browser being used",
                "type": "Function"
            },
            "class": "utils",
            "module": "utils.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 78,
            "description": "Get a norally distributed random number",
            "itemtype": "method",
            "name": "nrand",
            "params": [
                {
                    "name": "m",
                    "description": "mean",
                    "type": "Number"
                },
                {
                    "name": "sd",
                    "description": "standard deviation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "normally distributed random number",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 96,
            "description": "Convert midi note number (can be floating point) to a frequency value",
            "itemtype": "method",
            "name": "mtof",
            "params": [
                {
                    "name": "m",
                    "description": "MIDI note number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the frequency of the MIDI note number",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 106,
            "description": "Maps a domain of numbers [f1, f2] linearly onto a range [t1, t2]",
            "itemtype": "method",
            "name": "mapconstrain",
            "params": [
                {
                    "name": "f1",
                    "description": "first endpoint of domain",
                    "type": "Number"
                },
                {
                    "name": "f2",
                    "description": "second endpoint of domain",
                    "type": "Number"
                },
                {
                    "name": "f1",
                    "description": "first endpoint of range",
                    "type": "Number"
                },
                {
                    "name": "f1",
                    "description": "second endpoint of range",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "number to map",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "result of mapping x (not actually limited to range!)",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils.js"
        },
        {
            "file": "jsaSndLib\\utils.js",
            "line": 121,
            "description": "This is a rational function to approximate a tanh-like soft clipper. It is based on the pade-approximation of the tanh function with tweaked coefficients.\nThe function is in the range x=-3..3 and outputs the range y=-1..1. Beyond this range the output must be clamped to -1..1.\nThe first to derivatives of the function vanish at -3 and 3, so the transition to the hard clipped region is C2-continuous.\nhttp://stackoverflow.com/questions/6118028/fast-hyperbolic-tangent-approximation-in-javascript.",
            "itemtype": "method",
            "name": "rational_tanh",
            "params": [
                {
                    "name": "x",
                    "description": "number to be mapped",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "tanh(x)",
                "type": "Number"
            },
            "class": "utils",
            "module": "utils.js"
        }
    ],
    "warnings": []
}